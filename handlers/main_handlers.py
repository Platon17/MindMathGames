# –•—ç–Ω–¥–ª–µ—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
from var import user_dict
from data import FSM_state, idPlaton
from services.services import _text,_txt,_atext
from keyboards.keyboards import create_inline_kb, create_kb, create_kb_ru

from aiogram import Router
from aiogram.fsm.context import FSMContext


from aiogram import F
from aiogram import types
from aiogram.filters import Command, StateFilter, or_f
from aiogram.utils import markdown
from aiogram.enums import ParseMode
from handlers import solve_handlers



from aiogram.fsm.state import default_state, State, StatesGroup


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
router_main = Router()
#router_main.message.filter(StateFilter(default_state))     # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
router_main.include_router(solve_handlers.router_solve)     # —Ä–æ—É—Ç–µ—Ä —Ä–µ—à–∞—Ç—å

# –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
@router_main.message(F.text.endswith('–∑—ã–∫' ))
@router_main.message(F.text.endswith('anguage'))
@router_main.message(F.text=='üá∑üá∫ –Ø–∑—ã–∫ üá¨üáß')
async def to_lang(message: types.Message, state: FSMContext):
    await message.answer(
            text=markdown.text(
                _text('what_lang4', 'ru')+_text('what_lang4', 'en'),
                sep="\n"
            ),
            reply_markup=create_kb_ru(3, 'btnRU', 'btnEN', 'btnDE', 'btnCH','btnJP')
        )
    await state.set_state(FSM_state.wLang)

@router_main.message(F.text=='üèò –î–æ–º–æ–π')
@router_main.message(F.text=='üèò Home')
@router_main.message(F.text.endswith('–æ–º–æ–π'))
@router_main.message(F.text.endswith('home'))
@router_main.message(F.text.endswith('ancel'))
@router_main.message(F.text.endswith('—Ç–º–µ–Ω–∞'))
async def mm(message: types.Message, state: FSMContext):
        await message.answer(
            text=markdown.text(
                _txt('about1', message.from_user.id),
                sep="\n"
            ),
            reply_markup=create_kb(3,message.from_user.id, 'btn_solve', 'btn_train', 'btn_research', 'btn_speak','btn_AI','btn_language')
        )
        await message.answer(text=_txt('about1', message.from_user.id))
        await state.clear()


@router_main.message(F.text=='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', StateFilter(FSM_state.wSolve))
@router_main.message(F.text=='‚¨ÖÔ∏è Back', StateFilter(FSM_state.wSolve))
@router_main.message(F.text=='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', StateFilter(FSM_state.wTrain))
@router_main.message(F.text=='‚¨ÖÔ∏è Back', StateFilter(FSM_state.wTrain))
@router_main.message(F.text=='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', StateFilter(FSM_state.wReserch))
@router_main.message(F.text=='‚¨ÖÔ∏è Back', StateFilter(FSM_state.wReserch))
@router_main.message(F.text=='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', StateFilter(FSM_state.wAI))
@router_main.message(F.text=='‚¨ÖÔ∏è Back', StateFilter(FSM_state.wAI))
@router_main.message(F.text=='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', StateFilter(FSM_state.wSpeak))
@router_main.message(F.text=='‚¨ÖÔ∏è Back', StateFilter(FSM_state.wSpeak))
async def back_mm(message: types.Message, state: FSMContext):
    await mm(message, state)

# –°–¢–ê–†–¢
# –∫–æ–º–∞–Ω–¥–∞ –°–¢–ê–†–¢
@router_main.message(Command('start'))
@router_main.message(Command('cancel'))
@router_main.message(Command('home'))
@router_main.message(F.text.endswith('tart'))
@router_main.message(F.text.endswith('–∞—á–∞–ª–æ'))
async def start(message: types.Message, state: FSMContext):
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ø–µ—Ä–≤—ã–µ, —Å–ø—Ä–æ—Å–∏–º —è–∑—ã–∫
    if message.from_user.id not in user_dict:
        await message.answer(text=_text('Hello1', 'ru'))
        await to_lang(message, state)
    else:
        await message.answer(text=_txt('hello_again', message.from_user.id))
        await mm(message, state)

@router_main.message(StateFilter(FSM_state.wLang), F.text=='üá∑üá∫ –†—É—Å—Å–∫–∏–π')
@router_main.message(StateFilter(FSM_state.wLang), F.text.endswith('—É—Å—Å–∫–∏–π'))
@router_main.message(F.text.endswith('—É—Å—Å–∫–∏–π'))
async def set_lang_ru(message: types.Message, state: FSMContext):
    user_dict[message.from_user.id] = {'lang': 'ru'}
    await mm(message,state)

@router_main.message(StateFilter(FSM_state.wLang), F.text=='üá¨üáßEnglish')
@router_main.message(StateFilter(FSM_state.wLang), F.text.endswith('nglish'))
@router_main.message(F.text.endswith('nglish'))
async def set_lang_en(message: types.Message, state: FSMContext):
    user_dict[message.from_user.id] = {'lang': 'en'}
    await mm(message,state)

# –∑–Ω–∞–∫–æ–º—ã–π —è–∑—ã–∫, –Ω–æ –±–µ–∑ —Å–ª–æ–≤–∞—Ä—è
@router_main.message(StateFilter(FSM_state.wLang), F.text.endswith('eutsche'))
@router_main.message(F.text.endswith('eutsche'))
async def set_lang_de(message: types.Message, state: FSMContext):
    await message.answer(text=_txt('lang_known',message.from_user.id))
# –Ω–µ–∑–Ω–∞–∫–æ–º—ã–π
@router_main.message(StateFilter(FSM_state.wLang))
async def set_lang_ch(message: types.Message, state: FSMContext):
    await message.answer(text=_txt('lang_unknown',message.from_user.id))
## –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/cancel" –≤ –ª—é–±—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö,
# –∫—Ä–æ–º–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏ –æ—Ç–∫–ª—é—á–∞—Ç—å –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router_main.message(Command('cancel'))
async def process_cancel_command_state(message: types.Message, state: FSMContext):
    await message.answer(text=_txt('lets_do', message.from_user.id))
    await state.clear()

@router_main.message(Command('hello'))
async def hello(message: types.Message):
    url = "https://funik.ru/wp-content/uploads/2018/10/17478da42271207e1d86.jpg"
    await message.answer(
        text=_text('Hello2'),
        parse_mode=ParseMode.HTML
    )